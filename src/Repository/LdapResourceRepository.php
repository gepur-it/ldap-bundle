<?php
/**
 * Created by PhpStorm.
 * User: Andrii Yakovlev
 * Date: 08.12.17
 */
declare(strict_types=1);

namespace GepurIt\LdapBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\Persistence\ManagerRegistry;
use GepurIt\LdapBundle\Entity\LdapResource;

/**
 * LdapResourceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LdapResourceRepository extends ServiceEntityRepository
{
    /**
     * LdapResourceRepository constructor.
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, LdapResource::class);
    }

    /**
     * @return LdapResource[] get full information (with related models)
     */
    public function findAllFull(): array
    {
        $query = $this->createQueryBuilder('resource')
            ->addSelect('roleAccesses')
            ->addSelect('role')
            ->leftJoin('resource.roleAccesses', 'roleAccesses')
            ->leftJoin('roleAccesses.role', 'role')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param string $resourceName
     *
     * @return LdapResource|null
     * @throws NonUniqueResultException
     */
    public function findOneFullByResource(string $resourceName): ?LdapResource
    {
        $query = $this->createQueryBuilder('resource')
            ->addSelect('roleAccesses')
            ->addSelect('role')
            ->leftJoin('resource.roleAccesses', 'roleAccesses')
            ->leftJoin('roleAccesses.role', 'role')
            ->where('resource.resource = :resourceName')->setParameter('resourceName', $resourceName)
            ->getQuery();

        /** @var LdapResource|null $resource */
        $resource = $query->getOneOrNullResult();

        return $resource;
    }

    /**
     * @param string $resourceName
     *
     * @return null|LdapResource
     */
    public function findOneByResource(string $resourceName): ?LdapResource
    {
        /** @var LdapResource $resourceName */
        $resourceName = $this->findOneBy(['resource' => $resourceName]);

        return $resourceName;
    }

    /**
     * @param string $role
     *
     * @return bool
     */
    public function existsByResource(string $role): bool
    {
        return (null !== $this->findOneByResource($role));
    }
}
